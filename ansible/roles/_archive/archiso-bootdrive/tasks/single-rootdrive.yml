- name: Close all open LUKS volumes
  ansible.builtin.shell: |
    for vol in $(ls /dev/mapper | grep 'luks_zfs_'); do
      cryptsetup luksClose $vol || true
    done
  args:
    executable: /bin/bash

- name: Destroy partitions from disk(s)
  command: wipefs -a {{ item }}
  loop: "{{ bootdrives }}"
  tags: [ bootdrive ]

- name: Create new EFI boot partition(s)
  community.general.parted:
    label: gpt
    device: "{{ item }}"
    name: EFI System
    number: 1
    part_start: 1MiB
    part_end: 512MiB
    flags: [ esp ]
    state: present
  loop: "{{ bootdrives }}"
  tags: [ bootdrive ]
- ansible.builtin.setup: { gather_subset: [ hardware ] } # Regather hardware facts after creating partition

- set_fact: { disk_partition_details: [] } # Clear variable
- name: Gather detailed partition info
  vars:
    current_disk_id: "{{ disk_id.split('/')[-1] }}"
    matched_device: "{{ ansible_facts.devices | dict2items | selectattr('value.links.ids', 'contains', current_disk_id) | map(attribute='value') | first }}"
    partitions_info: "{{ matched_device.partitions | dict2items | sort(attribute='value.start') | map(attribute='value') | map('json_query', '{partition_id: links.ids[0], partition_uuid: uuid}') | list }}"
  set_fact:
    disk_partition_details: "{{ disk_partition_details | default([]) + [{'disk_id': disk_id, 'partitions': partitions_info}] }}"
  loop: "{{ bootdrives }}"
  loop_control:
    loop_var: disk_id

- name: Create a FAT32 filesystem on EFI boot partition
  community.general.filesystem:
    fstype: vfat
    dev: "/dev/disk/by-id/{{ item.partitions[0].partition_id }}"
    force: true
  loop: "{{ disk_partition_details }}"
  tags: [ bootdrive ]

- name: Create a new FAT32 data-partition on boot media.
  community.general.parted:
    device: "{{ item }}"
    label: gpt
    name: "Data"
    number: 2
    state: present
    part_start: 512MiB
    part_end: 1GiB
  loop: "{{ bootdrives }}"
  tags: [ bootdrive ]
- ansible.builtin.setup: { gather_subset: [ hardware ] } # Regather hardware facts after creating partition

- set_fact: { disk_partition_details: [] } # Clear variable
- name: Gather detailed partition info
  vars:
    current_disk_id: "{{ disk_id.split('/')[-1] }}"
    matched_device: "{{ ansible_facts.devices | dict2items | selectattr('value.links.ids', 'contains', current_disk_id) | map(attribute='value') | first }}"
    partitions_info: "{{ matched_device.partitions | dict2items | sort(attribute='value.start') | map(attribute='value') | map('json_query', '{partition_id: links.ids[0], partition_uuid: uuid}') | list }}"
  set_fact:
    disk_partition_details: "{{ disk_partition_details | default([]) + [{'disk_id': disk_id, 'partitions': partitions_info}] }}"
  loop: "{{ bootdrives }}"
  loop_control:
    loop_var: disk_id

- name: Create a FAT32 filesystem Data partition
  community.general.filesystem:
    fstype: vfat
    dev: "/dev/disk/by-id/{{ item.partitions[1].partition_id }}"
    force: true
  loop: "{{ disk_partition_details }}"
  tags: [ bootdrive ]

- name: Create partition for LUKS
  community.general.parted:
    device: "{{ item }}"
    label: gpt
    name: "Linux LUKS"
    number: 3
    state: present
    part_start: 1GiB
    part_end: "100%"
  loop: "{{ bootdrives }}"
  tags: [ bootdrive ]
- ansible.builtin.setup: { gather_subset: [ hardware ] } # Regather hardware facts after creating partition

- set_fact: { disk_partition_details: [] } # Clear variable
- name: Gather detailed partition info
  vars:
    current_disk_id: "{{ disk_id.split('/')[-1] }}"
    matched_device: "{{ ansible_facts.devices | dict2items | selectattr('value.links.ids', 'contains', current_disk_id) | map(attribute='value') | first }}"
    partitions_info: "{{ matched_device.partitions | dict2items | sort(attribute='value.start') | map(attribute='value') | map('json_query', '{partition_id: links.ids[0], partition_uuid: uuid}') | list }}"
  set_fact:
    disk_partition_details: "{{ disk_partition_details | default([]) + [{'disk_id': disk_id, 'partitions': partitions_info}] }}"
  loop: "{{ bootdrives }}"
  loop_control:
    loop_var: disk_id
- debug: { var: disk_partition_details }

- name: Create LUKS container with specific encryption
  community.crypto.luks_device:
    device: /dev/disk/by-id/{{ item.partitions[2].partition_id }}
    type: luks2
    cipher: aes-xts-plain64
    hash: sha512
    keysize: 512
    pbkdf:
      algorithm: argon2id
      iteration_time: 3
    name: luks_zfs_{{ item.partitions[2].partition_id }}
    passphrase: "{{ luks_passphrase }}"
    state: opened
  loop: "{{ disk_partition_details }}"
- ansible.builtin.setup: { gather_subset: [ hardware ] } # Regather hardware facts after creating partition


# - name: Mount crypt drives
#   ansible.posix.mount:
#     path: /mnt
#     src: luks_zfs_{{ item.partitions[2].partition_id }}
#     state: present
#   loop: "{{ disk_partition_details }}"

# - name: Open LUKS containers
#   community.crypto.luks_device:
#     device: /dev/disk/by-id/{{ item.partitions[2].partition_id }}
#     passphrase: "{{ luks_passphrase }}"
#     state: opened
#   loop: "{{ disk_partition_details }}"

#### Next is to create ZFS, then mount and mount boot.

- set_fact: { arch_install_zfsonroot_stripe_paths: "" } # Clear variable
- name: ZFS | Put zfs-drive paths into stripe format
  ansible.builtin.set_fact:
    arch_install_zfsonroot_stripe_paths: "{{ arch_install_zfsonroot_stripe_paths | default('') + '/dev/mapper/luks_zfs_' + item.partitions[2].partition_id + ' ' }}"
  loop: "{{ disk_partition_details }}"


- name: ZFS | Print arch_install_zfsonroot_stripe_paths
  debug:
    msg: "{{ arch_install_zfsonroot_stripe_paths }}"

- name: ZFS | Create Pool
  command: >-
    zpool create -f rpool
    -o ashift=13
    -o altroot=/mnt/rpool
    -O compression=lz4
    -O xattr=sa
    -O atime=off
    -O acltype=posix
    -O dedup=off
    -O checksum=on
    -O recordsize=128k
    -m none mirror {{ arch_install_zfsonroot_stripe_paths }}
