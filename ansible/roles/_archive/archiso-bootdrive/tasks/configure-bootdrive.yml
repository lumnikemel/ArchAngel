- name: Get the smallest disk and register output
  when: bootdrive is not defined
  shell: echo $(lsblk -bo size,name,type,id-link | grep disk | sort -bg | head -n 1 | xargs | awk '{$1=$1;print}' | cut -d " " -f 4)
  register: arch_install_boot_drive_lsblk
  tags: [ vars, bootdrive ]
- ansible.builtin.set_fact:
    arch_install_boot_drive_id_by_id: "{{ arch_install_boot_drive_lsblk.stdout }}"
  when: bootdrive is not defined
  tags: [ vars, bootdrive ]

- name: Set size of bootdisk
  when: bootdrive is not defined
  command: lsblk -dbno size /dev/disk/by-id/{{ arch_install_boot_drive_id_by_id }}
  register: arch_install_boot_drive_size_bytes_out
  tags: [ vars, bootdrive ]
- ansible.builtin.set_fact:
    arch_install_boot_drive_size_bytes: "{{ arch_install_boot_drive_size_bytes_out.stdout }}"
  when: bootdrive is not defined
  tags: [ vars, bootdrive ]
- debug:
    msg: "{{ arch_install_boot_drive_size_bytes }}"
  tags: [ never, debug, vars, bootdrive ]

- name: Register UUID of bootdrive data-partition
  when: bootdrive is not defined
  shell: blkid -o export /dev/disk/by-id/{{ arch_install_boot_drive_id_by_id }}-part1 | grep -E '^UUID' | awk '{$1=$1;print}' | cut -d'=' -f2
  register: arch_install_bootdrive_boot_part_uuid_out
  tags: [ vars, bootdrive ]

- name: Register UUID of bootdrive data-partition
  when: bootdrive is not defined
  shell: blkid -o export /dev/disk/by-id/{{ arch_install_boot_drive_id_by_id }}-part2 | grep -E '^UUID' | awk '{$1=$1;print}' | cut -d'=' -f2
  register: arch_install_bootdrive_data_part_uuid_out
  tags: [ vars, bootdrive ]


- name: Set bootdrive fact
  when: bootdrive is not defined
  set_fact:
    bootdrive:
      id: "{{ arch_install_boot_drive_id_by_id }}" # ID located in /dev/disk/by-id
      path: /dev/disk/by-id/{{ arch_install_boot_drive_id_by_id }} # Full path and id, /dev/disk/by-id/abc-xyz-123
      size: "{{ arch_install_boot_drive_size_bytes_out.stdout }}" # Size of drive in bytes; found throuhgh blkid
      boot_part:
        name: EFI System
        size: 1024MiB
        fstype: vfat
        id: "{{ arch_install_boot_drive_id_by_id }}-part1"
        path: "/dev/disk/by-id/{{ arch_install_boot_drive_id_by_id }}-part1"
        uuid: "{{ arch_install_bootdrive_boot_part_uuid_out.stdout }}" # UUID located in /dev/disk/by-uuid
      data_part:
        name: Data
        size: "100%"
        fstype: vfat
        id: "{{ arch_install_boot_drive_id_by_id }}-part2"
        path: "/dev/disk/by-id/{{ arch_install_boot_drive_id_by_id }}-part2"
        uuid: "{{ arch_install_bootdrive_data_part_uuid_out.stdout }}" # UUID located in /dev/disk/by-uuid
  tags: [ vars, bootdrive ]


##### Boot disk
- name: Remove all partitions from disk
  when: wipe_bootdrive == true
  command: wipefs -a {{ bootdrive.path }}
  tags: [ bootdrive ]

- name: Create a new EFI boot partition with a size of {{ bootdrive.boot_part.size }}
  when: wipe_bootdrive == true
  community.general.parted:
    label: gpt
    device: "{{ bootdrive.path }}"
    name: "{{ bootdrive.boot_part.name }}"
    number: 1
    part_start: 1MiB
    part_end: "{{ bootdrive.boot_part.size }}"
    flags: [ esp ]
    state: present
  tags: [ bootdrive ]

- name: Create a FAT32 filesystem on {{ bootdrive.boot_part.path }}
  when: wipe_bootdrive == true
  community.general.filesystem:
    fstype: "{{ bootdrive.boot_part.fstype }}"
    dev: "{{ bootdrive.boot_part.path }}"
  tags: [ bootdrive ]

- name: Create a new FAT32 data-partition on boot media.
  when: wipe_bootdrive == true
  community.general.parted:
    device: "{{ bootdrive.path }}"
    label: gpt
    name: "{{ bootdrive.data_part.name }}"
    number: 2
    state: present
    part_start: 1025MiB
    part_end: "{{ bootdrive.data_part.size }}"
  tags: [ bootdrive ]

- name: Create a FAT32 filesystem on {{ bootdrive.data_part.path }}
  when: wipe_bootdrive == true
  community.general.filesystem:
    fstype: "{{ bootdrive.data_part.fstype }}"
    dev: "{{ bootdrive.data_part.path }}"
  tags: [ bootdrive ]

- name: Mount bootdrive
  ansible.posix.mount:
    path: "{{ altroot }}/boot"
    src: "{{ bootdrive.boot_part.path }}"
    fstype: "{{ bootdrive.boot_part.fstype }}"
    state: mounted
  tags: [ bootdrive ]

# systemd container cannot affect the EFI boot manager, so this needs to be run from ArchISO
- name: Install bootloader
  command: bootctl --path={{ altroot }}/boot install
  tags: [ bootdrive ]

- name: Dismount bootdrive
  ansible.posix.mount:
    path: "{{ altroot }}/boot"
    state: absent
  tags: [ bootdrive ]